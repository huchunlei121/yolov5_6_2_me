

二、项目模型结构
文件夹：
    classify:负责分类模型
    data:数据定义
    models:模型相关的代码文件
    runs:默认运行输出文件夹
    utils:工具相关的代码文件夹
文件：
    detect.py:目标检测的应用代码
    export.py:将pytorch模型转换成其它模型
    hubconf.py:针对torch.hub.load API开发的入口代码，内部包含了模型构建相关，恢复相关的代码
    train.py:训练入口代码
    val.py:校验评估入口代码
三、模型训练
    1、直接运行train.py
        默认情况下下载coco128数据集放到dataset文件夹中
        同时默认会下载yolo5s.pt
        修改一下内容：
            a.gc.collect(),torch.cuda.empty_cache()添加gc和释放GPU显存
            b.修改参数内容（给定epoch次数和给定路劲）这个一般调小一点和batch_size.
            c.如果使用windows系统内存还是不够，workers设置成0 或者https://blog.csdn.net/weixin_42067873/article/details/120887060


七、yolov5训练自己的数据集的步骤（迁移了coco数据集上的yolov5的模型参数---使用参数--命令行运行的第一条）：
    1、用labelImg进行数据标注
    2、修改配置文件：
        2.1. 模型配置文件：model/yolov5s_flowers.yaml
        2.2. 数据配置文件：data/flowers.yaml
        2.3. 超参数hyp配置文件：data/hyps/hyp.scratch-low.yaml
    3、pycharm 运行train.py
        modify run configuration 加入参数 --weight ./yolov5s.pt --cfg ./models/yolov5s_flowers.yaml --data .data/flowers.yaml --hyp data/hyps/hyp.scratch-low.yaml
                   不做迁移学习的话 加入参数 --weight ''           --cfg ./models/yolov5s_flowers.yaml --data .data/flowers.yaml --hyp data/hyps/hyp.scratch-low.yaml
