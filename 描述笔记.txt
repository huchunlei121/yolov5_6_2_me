

二、项目模型结构
文件夹：
    classify:负责分类模型
    data:数据定义，包括数据下载
    models:模型相关的代码文件
    runs:默认运行输出文件夹
    utils:工具相关的代码文件夹
文件：
    detect.py:目标检测的应用代码
    export.py:将pytorch模型转换成其它模型
    hubconf.py:针对torch.hub.load API开发的入口代码，内部包含了模型构建相关，恢复相关的代码
    train.py:训练入口代码
    val.py:校验评估入口代码
    model/*.yaml: 模型结构参数配置文件，运行的时候通过参数："--cfg"决定，做迁移学习的时候可以不给定，不做迁移的时候就要给定
三、模型训练
    1、直接运行train.py
        默认情况下下载coco128数据集放到dataset文件夹中
        同时默认会下载yolo5s.pt
        修改一下内容：
            a.gc.collect(),torch.cuda.empty_cache()添加gc和释放GPU显存
            b.修改参数内容（给定epoch次数和给定路劲）这个一般调小一点和batch_size.
            c.如果使用windows系统内存还是不够，线程数workers设置成0 或者https://blog.csdn.net/weixin_42067873/article/details/120887060
            d.yolov5默认的测试数据集加载的并行度是workers*2,改成worker即可
            e.loader()方法中的pin_memory更改成false
四、train.py代码解析
    方法功能说明：
        train：训练的核心代码
        parse_opt:获取运行入参
        main：主入口；主要对参数进行处理和保存的操作
        run：对外提供一个入口方法
    调用链路  main->train
五、dataloaders.py的解析
    yolov5支持直接将图片或者视频的数据转换到dataloader当中去.
    文件类型包括:
    ‘bmp’, ‘jpg’, ‘jpeg’, ‘png’, ‘tif’, ‘tiff’, ‘dng’, ‘webp’, ‘mpo’
    ‘mov’, ‘avi’, ‘mp4’, ‘mpg’, ‘mpeg’, ‘m4v’, ‘wmv’, ‘mkv’
    （1）快速加载数据集标签的技巧
    yolov5只会在第一次读取数据集的时候,将标签文件处理成一个cache文件,这样,再重新读取数据集的时候,直接搜索数据集中是否存在cache文件即可.---会放到../datasets/coco128/labels下
    （2）在detect应用实际场景中数据加载的技巧
    yolov5提供了一个create_dataloader函数,可以在其参数中指定使用哪些加载技巧.然后只需要拿到加载数据集的迭代器就可以了
    在检测阶段,如果你需要检测某一个文件夹中所有的图片,或者是从摄像头里面拉取视屏流,亦或者是从http协议中拉取视频流,yolov5都提供了一整套解决方案.相比于其他检测器的代码,你会发现,yolov5对于实际场景的检测做了很多的支持,不需要我们再单独部署模型.同时如果我们想将其部署到C++中,也可以参考其加载数据的代码技巧
    （3）数据训练的技巧
    yolov5提供一个切割图片并将其重组的方法,它支持两种方式:切割为9份或者切割为4份. 默认情况下会切割四张图片进行重组, 对于切割9份的方法,从实际角度出发,如果存在图片中的目标比较小,同时数量比较少的情况,可以考虑这种方法来提高样本的平衡性.
    具体做法:(以切割四份为例):
    首先会准备四张图片,然后在这四张图片中分别随机切割一个区域,最后,将这四个区域重新组合成一张图片.这种做法对于数据量较少的数据集来说,可以很大程度的提高数据量,同时,这种方法还会让网络更好的适应极端的环境
六、yolov5模型可视化
    通过netron进行可视化操作，运行export.py

七、yolov5训练自己的数据集的步骤（迁移了coco数据集上的yolov5的模型参数---使用参数--命令行运行的第一条）：
    1、用labelImg进行数据标注
    2、修改配置文件：
        2.1. 模型配置文件：model/yolov5s_flowers.yaml
        2.2. 数据配置文件：data/flowers.yaml
        2.3. 超参数hyp配置文件：data/hyps/hyp.scratch-low.yaml
    3、pycharm 运行train.py
        modify run configuration 加入参数 --weight ./yolov5s.pt --cfg ./models/yolov5s_flowers.yaml --data .data/flowers.yaml --hyp data/hyps/hyp.scratch-low.yaml
                   不做迁移学习的话 加入参数 --weight ''           --cfg ./models/yolov5s_flowers.yaml --data .data/flowers.yaml --hyp data/hyps/hyp.scratch-low.yaml
